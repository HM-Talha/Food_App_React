import React, {useEffect, useRef, useState} from "react";
import {useHistory} from "react-router-dom";
import axios from "axios";
import {baseUrl} from "../../../config/api-config";
import {getDistance, getRandomArbitrary} from "../../../components/cards/SimpleCard";
import "../styles/dishSensoryView.scss";
import {vibrate} from "../../onboarding/components/FoodtypeSelector";
import {BackIcon} from "../../../assets/icons";
import Lottie from "lottie-react";
import SensoryProfile from "../../../assets/lottie/animation/SensoryProfile.json";
import { Title } from "../../../components/Fonts";

const BigCX = 300;
const BigCY = 500;
const BigCR = 300;
const ViewX = 600;
const ViewY = 1000;
const CirclePaths = () => {
    let circlesData = [];
    let counter = 0;
    let visited = {};
    while (true) {
        const radius = getRandomArbitrary(5, 40);
        const x = getRandomArbitrary(BigCX - BigCR, BigCX + BigCR);
        const y = getRandomArbitrary(BigCY - BigCR, BigCY + BigCR);
        let key = x + "-" + y;
        if (! (key in visited)) {

            if (circlesData.filter(c => getDistance(c.x, c.y, x, y) < c.radius + radius).length === 0) {

                if (getDistance(x, y, BigCX, BigCY) + radius <= BigCR) {
                    circlesData.push({
                        x,
                        y,
                        radius
                    })
                    counter = 0;
                }
            }
            if (counter > 1000) {
                break;
            }
            counter++;
            visited[key] = true
        }
    }
    circlesData = circlesData.sort((a, b) => {
        if (a.radius < b.radius) {
            return -1;
        }
        if (a.radius > b.radius) {
            return 1;
        }
        return 0;
    }).reverse()


    return {
        get: () => {
            console.log("fetching circles")
            console.log(circlesData)
            return circlesData;
        }
    }
};
const timer = ms => new Promise(res => setTimeout(res, ms))
let circlePaths = CirclePaths();
const SvgIndex = ['a','b','c','d','e','f','g','h'];
export const DishSensoryView = (props) => {
    const [sensoryData, setSensoryData] = useState({});
    const [shakeFlag, changeShakeFlag] = useState(false);
    const myStateRef = React.useRef(shakeFlag);
    const ref = useRef(null)
    const setShakeFlag = data => {
        myStateRef.current = data;
        changeShakeFlag(data)
    }
    let popuptimer = null;
    let adjustTimer = null;
    function onCircleClick(e, c) {
        if (true) {
            console.log(myStateRef.current)
            vibrate()
            clearTimeout(popuptimer)
            clearTimeout(adjustTimer)
            const infoView = document.getElementById("info-view-sensory");
            console.log(sensoryData)
            infoView.style.left = (e.clientX - 60) < 0 ? 0 : (e.clientX - 60) + 'px';
            infoView.style.top = (e.clientY - 100) < 0 ? 0 : (e.clientY - 100) + 'px';
            const svgIndex = SvgIndex.indexOf(e.target.parentElement.parentElement.id);
            if (svgIndex > 0 && myStateRef.current.length > svgIndex) {
                    // debugger
                    document.getElementById("info-view-sensory-value").innerText = myStateRef.current[svgIndex].split("-")[1];
                    document.getElementById("info-view-sensory-unit").innerText = myStateRef.current[svgIndex].split("-")[0];
                    adjustTimer = setTimeout(() => {
                        const infoView = document.getElementById("info-view-sensory");
                        const bodyView = document.getElementsByTagName("body")[0];
                        if (infoView.offsetLeft + infoView.offsetWidth > bodyView.offsetWidth) {
                            infoView.style.left = bodyView.offsetWidth - infoView.offsetWidth + 'px';
                        }
                    }, 500)

                    popuptimer = setTimeout(() => {
                        const infoView = document.getElementById("info-view-sensory");
                        infoView.style.left = '-1000px';
                        infoView.style.top = '-1000px';
                    }, 5000)
            } else {
                popuptimer = setTimeout(() => {
                    const infoView = document.getElementById("info-view-sensory");
                    infoView.style.left = '-1000px';
                    infoView.style.top = '-1000px';
                }, 100)
            }
        } else {
            // onBtnClick()
        }
    }

    async function  fetchSensoryData() {

        let res = await axios.get(`${baseUrl}/recipe/recipesSensory/${props.match.params.id}`, {timeout: 10000});
        if (res.data.message === null) {
            res = await axios.get(`${baseUrl}/recipe/recipesSensory/${props.match.params.recipeId}`, {timeout: 10000});
        }
        let sensoryProfile = res.data.message.sensoryProfile;
        let tags = [];
        for (const key in sensoryProfile) {
            if (sensoryProfile[key].length > 0) {
                sensoryProfile[key].forEach(tag => {
                    if(typeof(tag) === 'object')
                        tags.push(key.replaceAll("_Tag", "") + "-" + tag[key])
                    else
                        tags.push(key.replaceAll("_Tag", "") + "-" + tag)
                })
            }
        }
        setSensoryData(tags)
        myStateRef.current = tags;
        /*
        setShakeFlag(false);
        const circlePositions = circlePaths.get()
        const colors = ["#ABD9D6", "#748000", "#F6BF50", "#C89FEB", "#FC7647"]
        const svgCanvas = document.getElementById("sensory-svg");
        svgCanvas.innerHTML = "";
        const svgns = "http://www.w3.org/2000/svg";
        for (let i = 0; i < circlePositions.length; i++) {
            const c = circlePositions[i];
            const g = document.createElementNS(svgns, 'g');
            const cir = document.createElementNS(svgns, 'circle');
            cir.setAttribute('cx', c.x);
            cir.setAttribute('cy', c.y);
            cir.setAttribute('r', c.radius);
            cir.setAttribute('id', i);
            if (i < Object.keys(nutritionalValue).length) {
                let value = Object.keys(nutritionalValue)[i];
                cir.setAttribute('value', value);
                const unit = nutritionalValue[value];
                cir.setAttribute('unit', Math.round(parseFloat(unit?.value) * 100)/100 + " " + unit?.unit);
                cir.addEventListener('click', (e) => onCircleClick(e, c));
                cir.setAttribute('fill', colors[i % colors.length]);
                // cir.setAttribute('stroke', "#daef04");
                // cir.setAttribute('stroke-width', 3);
            } else {
                cir.setAttribute('fill', "#E9E9E9");

            }
            // cir.setAttribute('fill', colors[i % colors.length]);

            g.appendChild(cir)
            svgCanvas.appendChild(cir)
            await timer(5);
        }
        */

    }
    const history = useHistory();
    const [dish, setDish] = useState({});

    async function fetchDishDetails() {
        const res = await axios.get(`${baseUrl}/recipe/${props.match.params.id}`, {timeout: 10000});
        setDish(res.data.message)
    }

    useEffect(() => {
        fetchDishDetails()
        fetchSensoryData();
        ref.current.playSegments([0, 99], true);
    }, []);

    function shake() {
        let squarePositions = [];
        const circlePositions = circlePaths.get()
        circlePositions.forEach(c => {
            let counter = 0;
            while (true) {
                const x = getRandomArbitrary(c.radius, ViewX - c.radius);
                const y = getRandomArbitrary(100, ViewY - 100);
                if (squarePositions.filter(s => getDistance(s.x, s.y, x, y) < s.radius + c.radius).length === 0) {
                    squarePositions.push({
                        x,
                        y,
                        radius: c.radius
                    })
                    break
                }
                if (counter > 100000) {
                    break;
                }
                counter++;
            }
        })
        squarePositions = squarePositions.sort((a, b) => {
            if (a.radius < b.radius) {
                return -1;
            }
            if (a.radius > b.radius) {
                return 1;
            }
            return 0;
        }).reverse()
        const svgCanvas = document.getElementById("sensory-svg");
        svgCanvas.childNodes.forEach((circle, index) => {
            if (index < squarePositions.length) {
                circle.setAttribute("cx", squarePositions[index].x)
                circle.setAttribute("cy", squarePositions[index].y)
            }
        })
    }

    function onBtnClick() {
        vibrate();
        if (shakeFlag) {
            fetchSensoryData()

        } else {
            shake();
            setShakeFlag(true);
        }
    }

    return (
        <div className="d-flex justify-content-between align-items-center vh-100 vw-100 flex-column">
            <div className="sensory-header-wrapper">
                <button onClick={() => history.goBack()} className='sensory-back mr-12px' style={{border: 'none', outline: 'none', background: 'none'}}>
                    <svg width="24" height="24" viewBox="0 0 24 24" fill="none" xmlns="http://www.w3.org/2000/svg" style={{marginTop: '3px'}}>
                        <path d="M15 18L9 12L15 6" stroke="#292929" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"/>
                    </svg>
                </button>
                <Title level={2}><div>Sensory Profile</div></Title>
            </div>
            <Lottie animationData={SensoryProfile} loop={false} autoPlay={false} lottieRef={ref}
                    className="splash-display-img" onDOMLoaded={() => {
                SvgIndex.forEach(ele => {
                    document.getElementById(ele)?.addEventListener('click', (e) => {
                        onCircleClick(e, "c")
                    });
                })
            }} />
            <InfoView/>
            {shakeFlag ?
                <ResetBtn onBtnClick={onBtnClick}/>
                :
                <ShakeBtn onBtnClick={onBtnClick}/>
            }

        </div>
    )
};
const InfoView = () => {
    return (
        <div id="info-view-sensory" className={"info-view-sensory"}>
            <span style={{color: "#FC7647", fontSize: "1rem"}} id={"info-view-sensory-unit"} className="text-capitalize">2gm</span>
            <span style={{color: "", fontSize: "1.5rem"}} id={"info-view-sensory-value"} className="text-capitalize">Energy</span>
        </div>

    )
}
const ResetBtn = ({onBtnClick}) => {
    return (
        <svg fill="none" height="20%" viewBox="0 0 49 63" width="15%" xmlns="http://www.w3.org/2000/svg"
             onClick={onBtnClick}>
            <path
                d="M8.03698 59V49.2H11.201C11.9663 49.2 12.5916 49.326 13.077 49.578C13.5623 49.83 13.9216 50.1753 14.155 50.614C14.3883 51.0527 14.505 51.538 14.505 52.07C14.505 52.686 14.337 53.2413 14.001 53.736C13.6743 54.2307 13.161 54.5807 12.461 54.786L14.603 59H13.217L11.229 54.954H11.145H9.21298V59H8.03698ZM9.21298 54.03H11.117C11.873 54.03 12.4236 53.848 12.769 53.484C13.1143 53.12 13.287 52.6533 13.287 52.084C13.287 51.5053 13.1143 51.048 12.769 50.712C12.433 50.3667 11.8776 50.194 11.103 50.194H9.21298V54.03ZM18.464 59.168C17.8013 59.168 17.2133 59.0187 16.7 58.72C16.1866 58.412 15.7806 57.9873 15.482 57.446C15.1926 56.9047 15.048 56.2653 15.048 55.528C15.048 54.8 15.1926 54.1653 15.482 53.624C15.7713 53.0733 16.1726 52.6487 16.686 52.35C17.2086 52.042 17.8106 51.888 18.492 51.888C19.164 51.888 19.7426 52.042 20.228 52.35C20.7226 52.6487 21.1006 53.0453 21.362 53.54C21.6233 54.0347 21.754 54.5667 21.754 55.136C21.754 55.2387 21.7493 55.3413 21.74 55.444C21.74 55.5467 21.74 55.6633 21.74 55.794H16.21C16.238 56.326 16.3593 56.7693 16.574 57.124C16.798 57.4693 17.0733 57.7307 17.4 57.908C17.736 58.0853 18.0906 58.174 18.464 58.174C18.9493 58.174 19.3553 58.062 19.682 57.838C20.0086 57.614 20.2466 57.3107 20.396 56.928H21.558C21.3713 57.572 21.012 58.1087 20.48 58.538C19.9573 58.958 19.2853 59.168 18.464 59.168ZM18.464 52.882C17.904 52.882 17.4046 53.0547 16.966 53.4C16.5366 53.736 16.2893 54.2307 16.224 54.884H20.592C20.564 54.2587 20.3493 53.7687 19.948 53.414C19.5466 53.0593 19.052 52.882 18.464 52.882ZM25.4727 59.168C24.642 59.168 23.9513 58.958 23.4007 58.538C22.85 58.118 22.528 57.5487 22.4347 56.83H23.6387C23.7133 57.194 23.9047 57.5113 24.2127 57.782C24.53 58.0433 24.9547 58.174 25.4867 58.174C25.9813 58.174 26.3453 58.0713 26.5787 57.866C26.812 57.6513 26.9287 57.3993 26.9287 57.11C26.9287 56.69 26.7747 56.41 26.4667 56.27C26.168 56.13 25.7433 56.004 25.1927 55.892C24.8193 55.8173 24.446 55.71 24.0727 55.57C23.6993 55.43 23.3867 55.234 23.1347 54.982C22.8827 54.7207 22.7567 54.38 22.7567 53.96C22.7567 53.3533 22.9807 52.8587 23.4287 52.476C23.886 52.084 24.502 51.888 25.2767 51.888C26.014 51.888 26.616 52.0747 27.0827 52.448C27.5587 52.812 27.834 53.3347 27.9087 54.016H26.7467C26.7 53.6613 26.546 53.386 26.2847 53.19C26.0327 52.9847 25.692 52.882 25.2627 52.882C24.8427 52.882 24.516 52.9707 24.2827 53.148C24.0587 53.3253 23.9467 53.5587 23.9467 53.848C23.9467 54.128 24.0913 54.3473 24.3807 54.506C24.6793 54.6647 25.0807 54.8 25.5847 54.912C26.014 55.0053 26.42 55.122 26.8027 55.262C27.1947 55.3927 27.512 55.5933 27.7547 55.864C28.0067 56.1253 28.1327 56.508 28.1327 57.012C28.142 57.6373 27.904 58.1553 27.4187 58.566C26.9427 58.9673 26.294 59.168 25.4727 59.168ZM32.4347 59.168C31.772 59.168 31.184 59.0187 30.6707 58.72C30.1573 58.412 29.7513 57.9873 29.4527 57.446C29.1633 56.9047 29.0187 56.2653 29.0187 55.528C29.0187 54.8 29.1633 54.1653 29.4527 53.624C29.742 53.0733 30.1433 52.6487 30.6567 52.35C31.1793 52.042 31.7813 51.888 32.4627 51.888C33.1347 51.888 33.7133 52.042 34.1987 52.35C34.6933 52.6487 35.0713 53.0453 35.3327 53.54C35.594 54.0347 35.7247 54.5667 35.7247 55.136C35.7247 55.2387 35.72 55.3413 35.7107 55.444C35.7107 55.5467 35.7107 55.6633 35.7107 55.794H30.1807C30.2087 56.326 30.33 56.7693 30.5447 57.124C30.7687 57.4693 31.044 57.7307 31.3707 57.908C31.7067 58.0853 32.0613 58.174 32.4347 58.174C32.92 58.174 33.326 58.062 33.6527 57.838C33.9793 57.614 34.2173 57.3107 34.3667 56.928H35.5287C35.342 57.572 34.9827 58.1087 34.4507 58.538C33.928 58.958 33.256 59.168 32.4347 59.168ZM32.4347 52.882C31.8747 52.882 31.3753 53.0547 30.9367 53.4C30.5073 53.736 30.26 54.2307 30.1947 54.884H34.5627C34.5347 54.2587 34.32 53.7687 33.9187 53.414C33.5173 53.0593 33.0227 52.882 32.4347 52.882ZM39.295 59C38.6603 59 38.161 58.846 37.797 58.538C37.433 58.23 37.251 57.6747 37.251 56.872V53.05H36.047V52.056H37.251L37.405 50.39H38.427V52.056H40.471V53.05H38.427V56.872C38.427 57.3107 38.5156 57.6093 38.693 57.768C38.8703 57.9173 39.183 57.992 39.631 57.992H40.359V59H39.295Z"
                fill="black"/>
            <g opacity="0.9">
                <g clipPath="url(#clip0_4786_18661)">
                    <path fillRule="evenodd" clipRule="evenodd"
                          d="M16.5953 10.3542C16.0497 10.5244 15.7454 11.1047 15.9157 11.6503L20.8479 27.4563C21.0181 28.0019 21.5984 28.3061 22.144 28.1359L32.0228 25.0532C32.5683 24.883 32.8726 24.3027 32.7024 23.7571L27.7701 7.95115C27.5999 7.40556 27.0196 7.10129 26.474 7.27154L16.5953 10.3542ZM13.9399 12.2668C13.4292 10.6301 14.342 8.88918 15.9788 8.37843L25.8575 5.29579C27.4942 4.78505 29.2351 5.69786 29.7459 7.33462L34.6781 23.1406C35.1889 24.7773 34.276 26.5182 32.6393 27.029L22.7606 30.1116C21.1238 30.6224 19.3829 29.7096 18.8721 28.0728L13.9399 12.2668Z"
                          fill="#344569"/>
                    <path fillRule="evenodd" clipRule="evenodd"
                          d="M25.1711 23.9395C25.0008 23.3939 25.3051 22.8136 25.8507 22.6434L25.8605 22.6403C26.4061 22.4701 26.9864 22.7743 27.1567 23.3199C27.3269 23.8655 27.0227 24.4458 26.4771 24.6161L26.4672 24.6191C25.9216 24.7894 25.3413 24.4851 25.1711 23.9395Z"
                          fill="#344569"/>
                </g>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M36.2919 5.80045C36.8375 5.6302 37.4178 5.93447 37.588 6.48006L41.9037 20.3103C42.074 20.8559 41.7697 21.4362 41.2241 21.6064C40.6785 21.7767 40.0982 21.4724 39.928 20.9268L35.6123 7.09659C35.4421 6.551 35.7463 5.9707 36.2919 5.80045Z"
                      fill="#344569"/>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M12.2672 29.5579C11.7216 29.7282 11.1413 29.4239 10.971 28.8783L6.65534 15.0481C6.48509 14.5025 6.78936 13.9222 7.33495 13.752C7.88054 13.5817 8.46084 13.886 8.63109 14.4316L12.9468 28.2618C13.117 28.8074 12.8128 29.3877 12.2672 29.5579Z"
                      fill="#344569"/>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M40.8598 6.54362C41.4054 6.37337 41.9857 6.67764 42.1559 7.22322L45.2386 17.1019C45.4088 17.6475 45.1045 18.2278 44.5589 18.3981C44.0134 18.5683 43.4331 18.2641 43.2628 17.7185L40.1802 7.83975C40.0099 7.29416 40.3142 6.71386 40.8598 6.54362Z"
                      fill="#344569"/>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M7.6993 28.8158C7.15371 28.986 6.57341 28.6817 6.40316 28.1362L3.32052 18.2574C3.15027 17.7118 3.45455 17.1315 4.00013 16.9613C4.54572 16.791 5.12602 17.0953 5.29627 17.6409L8.37891 27.5196C8.54916 28.0652 8.24489 28.6455 7.6993 28.8158Z"
                      fill="#344569"/>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M31.4154 4.07047C31.961 3.90022 32.5413 4.20449 32.7116 4.75008L38.5686 23.5197C38.7388 24.0652 38.4346 24.6455 37.889 24.8158C37.3434 24.986 36.7631 24.6818 36.5928 24.1362L30.7358 5.36661C30.5656 4.82102 30.8699 4.24072 31.4154 4.07047Z"
                      fill="#344569"/>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M17.1436 31.2889C16.598 31.4592 16.0177 31.1549 15.8475 30.6093L9.99049 11.8397C9.82024 11.2941 10.1245 10.7138 10.6701 10.5436C11.2157 10.3733 11.796 10.6776 11.9662 11.2232L17.8232 29.9928C17.9935 30.5384 17.6892 31.1187 17.1436 31.2889Z"
                      fill="#344569"/>
            </g>
            <defs>
                <clipPath id="clip0_4786_18661">
                    <rect width="42.4289" height="24.8364" fill="white"
                          transform="translate(0.48291 12.6387) rotate(-17.3304)"/>
                </clipPath>
            </defs>
        </svg>
    )
}
const ShakeBtn = ({onBtnClick}) => {
    return (
        <svg fill="none" height="20%" viewBox="0 0 126 63" width="40%" xmlns="http://www.w3.org/2000/svg"
             onClick={onBtnClick}>
            <path
                d="M5.56642 59.168C4.60509 59.168 3.77442 58.958 3.07442 58.538C2.38376 58.1087 1.84709 57.516 1.46442 56.76C1.08176 55.9947 0.890422 55.108 0.890422 54.1C0.890422 53.1013 1.08176 52.224 1.46442 51.468C1.84709 50.7027 2.38376 50.1053 3.07442 49.676C3.77442 49.2467 4.60509 49.032 5.56642 49.032C6.68642 49.032 7.59642 49.3027 8.29642 49.844C9.00576 50.376 9.45842 51.1227 9.65442 52.084H8.35242C8.20309 51.4773 7.89509 50.992 7.42842 50.628C6.97109 50.2547 6.35042 50.068 5.56642 50.068C4.86642 50.068 4.25509 50.2313 3.73242 50.558C3.20976 50.8753 2.80376 51.3373 2.51442 51.944C2.23442 52.5413 2.09442 53.26 2.09442 54.1C2.09442 54.94 2.23442 55.6633 2.51442 56.27C2.80376 56.8673 3.20976 57.3293 3.73242 57.656C4.25509 57.9733 4.86642 58.132 5.56642 58.132C6.35042 58.132 6.97109 57.9547 7.42842 57.6C7.89509 57.236 8.20309 56.7553 8.35242 56.158H9.65442C9.45842 57.1007 9.00576 57.838 8.29642 58.37C7.59642 58.902 6.68642 59.168 5.56642 59.168ZM10.7746 59V48.92H11.9506V59H10.7746ZM14.0921 50.516C13.8588 50.516 13.6628 50.4413 13.5041 50.292C13.3548 50.1333 13.2801 49.9373 13.2801 49.704C13.2801 49.48 13.3548 49.2933 13.5041 49.144C13.6628 48.9947 13.8588 48.92 14.0921 48.92C14.3161 48.92 14.5074 48.9947 14.6661 49.144C14.8248 49.2933 14.9041 49.48 14.9041 49.704C14.9041 49.9373 14.8248 50.1333 14.6661 50.292C14.5074 50.4413 14.3161 50.516 14.0921 50.516ZM13.5041 59V52.056H14.6801V59H13.5041ZM19.4197 59.168C18.7571 59.168 18.1597 59.0187 17.6277 58.72C17.1051 58.412 16.6897 57.9873 16.3817 57.446C16.0831 56.8953 15.9337 56.256 15.9337 55.528C15.9337 54.8 16.0831 54.1653 16.3817 53.624C16.6897 53.0733 17.1051 52.6487 17.6277 52.35C18.1597 52.042 18.7571 51.888 19.4197 51.888C20.2411 51.888 20.9317 52.1027 21.4917 52.532C22.0611 52.9613 22.4204 53.5353 22.5697 54.254H21.3657C21.2724 53.8247 21.0437 53.4933 20.6797 53.26C20.3157 53.0173 19.8911 52.896 19.4057 52.896C19.0137 52.896 18.6451 52.994 18.2997 53.19C17.9544 53.386 17.6744 53.68 17.4597 54.072C17.2451 54.464 17.1377 54.9493 17.1377 55.528C17.1377 56.1067 17.2451 56.592 17.4597 56.984C17.6744 57.376 17.9544 57.6747 18.2997 57.88C18.6451 58.076 19.0137 58.174 19.4057 58.174C19.8911 58.174 20.3157 58.0573 20.6797 57.824C21.0437 57.5813 21.2724 57.2407 21.3657 56.802H22.5697C22.4297 57.502 22.0751 58.0713 21.5057 58.51C20.9364 58.9487 20.2411 59.168 19.4197 59.168ZM23.7121 59V48.92H24.8881V54.982L27.7301 52.056H29.1721L26.0921 55.192L29.5641 59H28.0661L24.8881 55.402V59H23.7121ZM33.4719 59V48.92H34.6479V53.246C34.8812 52.8167 35.2125 52.4853 35.6419 52.252C36.0712 52.0093 36.5379 51.888 37.0419 51.888C37.8445 51.888 38.4885 52.14 38.9739 52.644C39.4592 53.1387 39.7019 53.904 39.7019 54.94V59H38.5399V55.066C38.5399 53.6193 37.9565 52.896 36.7899 52.896C36.1832 52.896 35.6745 53.1153 35.2639 53.554C34.8532 53.9833 34.6479 54.5993 34.6479 55.402V59H33.4719ZM44.1056 59.168C43.4429 59.168 42.8549 59.0187 42.3416 58.72C41.8282 58.412 41.4222 57.9873 41.1236 57.446C40.8342 56.9047 40.6896 56.2653 40.6896 55.528C40.6896 54.8 40.8342 54.1653 41.1236 53.624C41.4129 53.0733 41.8142 52.6487 42.3276 52.35C42.8502 52.042 43.4522 51.888 44.1336 51.888C44.8056 51.888 45.3842 52.042 45.8696 52.35C46.3642 52.6487 46.7422 53.0453 47.0036 53.54C47.2649 54.0347 47.3956 54.5667 47.3956 55.136C47.3956 55.2387 47.3909 55.3413 47.3816 55.444C47.3816 55.5467 47.3816 55.6633 47.3816 55.794H41.8516C41.8796 56.326 42.0009 56.7693 42.2156 57.124C42.4396 57.4693 42.7149 57.7307 43.0416 57.908C43.3776 58.0853 43.7322 58.174 44.1056 58.174C44.5909 58.174 44.9969 58.062 45.3236 57.838C45.6502 57.614 45.8882 57.3107 46.0376 56.928H47.1996C47.0129 57.572 46.6536 58.1087 46.1216 58.538C45.5989 58.958 44.9269 59.168 44.1056 59.168ZM44.1056 52.882C43.5456 52.882 43.0462 53.0547 42.6076 53.4C42.1782 53.736 41.9309 54.2307 41.8656 54.884H46.2336C46.2056 54.2587 45.9909 53.7687 45.5896 53.414C45.1882 53.0593 44.6936 52.882 44.1056 52.882ZM48.4543 59V52.056H49.5183L49.6163 53.386C49.8309 52.9287 50.1576 52.5647 50.5963 52.294C51.0349 52.0233 51.5763 51.888 52.2203 51.888V53.12H51.8983C51.4876 53.12 51.1096 53.1947 50.7643 53.344C50.4189 53.484 50.1436 53.7267 49.9383 54.072C49.7329 54.4173 49.6303 54.8933 49.6303 55.5V59H48.4543ZM55.9025 59.168C55.2398 59.168 54.6518 59.0187 54.1385 58.72C53.6251 58.412 53.2191 57.9873 52.9205 57.446C52.6311 56.9047 52.4865 56.2653 52.4865 55.528C52.4865 54.8 52.6311 54.1653 52.9205 53.624C53.2098 53.0733 53.6111 52.6487 54.1245 52.35C54.6471 52.042 55.2491 51.888 55.9305 51.888C56.6025 51.888 57.1811 52.042 57.6665 52.35C58.1611 52.6487 58.5391 53.0453 58.8005 53.54C59.0618 54.0347 59.1925 54.5667 59.1925 55.136C59.1925 55.2387 59.1878 55.3413 59.1785 55.444C59.1785 55.5467 59.1785 55.6633 59.1785 55.794H53.6485C53.6765 56.326 53.7978 56.7693 54.0125 57.124C54.2365 57.4693 54.5118 57.7307 54.8385 57.908C55.1745 58.0853 55.5291 58.174 55.9025 58.174C56.3878 58.174 56.7938 58.062 57.1205 57.838C57.4471 57.614 57.6851 57.3107 57.8345 56.928H58.9965C58.8098 57.572 58.4505 58.1087 57.9185 58.538C57.3958 58.958 56.7238 59.168 55.9025 59.168ZM55.9025 52.882C55.3425 52.882 54.8431 53.0547 54.4045 53.4C53.9751 53.736 53.7278 54.2307 53.6625 54.884H58.0305C58.0025 54.2587 57.7878 53.7687 57.3865 53.414C56.9851 53.0593 56.4905 52.882 55.9025 52.882ZM66.2002 59C65.5656 59 65.0662 58.846 64.7022 58.538C64.3382 58.23 64.1562 57.6747 64.1562 56.872V53.05H62.9522V52.056H64.1562L64.3102 50.39H65.3322V52.056H67.3762V53.05H65.3322V56.872C65.3322 57.3107 65.4209 57.6093 65.5982 57.768C65.7756 57.9173 66.0882 57.992 66.5362 57.992H67.2642V59H66.2002ZM71.3429 59.168C70.6896 59.168 70.1016 59.0187 69.5789 58.72C69.0562 58.4213 68.6409 58.0013 68.3329 57.46C68.0342 56.9093 67.8849 56.2653 67.8849 55.528C67.8849 54.7907 68.0389 54.1513 68.3469 53.61C68.6549 53.0593 69.0702 52.6347 69.5929 52.336C70.1249 52.0373 70.7176 51.888 71.3709 51.888C72.0242 51.888 72.6122 52.0373 73.1349 52.336C73.6576 52.6347 74.0682 53.0593 74.3669 53.61C74.6749 54.1513 74.8289 54.7907 74.8289 55.528C74.8289 56.2653 74.6749 56.9093 74.3669 57.46C74.0589 58.0013 73.6389 58.4213 73.1069 58.72C72.5842 59.0187 71.9962 59.168 71.3429 59.168ZM71.3429 58.16C71.7442 58.16 72.1176 58.062 72.4629 57.866C72.8082 57.67 73.0882 57.376 73.3029 56.984C73.5176 56.592 73.6249 56.1067 73.6249 55.528C73.6249 54.9493 73.5176 54.464 73.3029 54.072C73.0976 53.68 72.8222 53.386 72.4769 53.19C72.1316 52.994 71.7629 52.896 71.3709 52.896C70.9696 52.896 70.5962 52.994 70.2509 53.19C69.9056 53.386 69.6256 53.68 69.4109 54.072C69.1962 54.464 69.0889 54.9493 69.0889 55.528C69.0889 56.1067 69.1962 56.592 69.4109 56.984C69.6256 57.376 69.9009 57.67 70.2369 57.866C70.5822 58.062 70.9509 58.16 71.3429 58.16ZM82.2911 59.168C81.6285 59.168 81.0405 59.0187 80.5271 58.72C80.0138 58.412 79.6078 57.9873 79.3091 57.446C79.0198 56.9047 78.8751 56.2653 78.8751 55.528C78.8751 54.8 79.0198 54.1653 79.3091 53.624C79.5985 53.0733 79.9998 52.6487 80.5131 52.35C81.0358 52.042 81.6378 51.888 82.3191 51.888C82.9911 51.888 83.5698 52.042 84.0551 52.35C84.5498 52.6487 84.9278 53.0453 85.1891 53.54C85.4505 54.0347 85.5811 54.5667 85.5811 55.136C85.5811 55.2387 85.5765 55.3413 85.5671 55.444C85.5671 55.5467 85.5671 55.6633 85.5671 55.794H80.0371C80.0651 56.326 80.1865 56.7693 80.4011 57.124C80.6251 57.4693 80.9005 57.7307 81.2271 57.908C81.5631 58.0853 81.9178 58.174 82.2911 58.174C82.7765 58.174 83.1825 58.062 83.5091 57.838C83.8358 57.614 84.0738 57.3107 84.2231 56.928H85.3851C85.1985 57.572 84.8391 58.1087 84.3071 58.538C83.7845 58.958 83.1125 59.168 82.2911 59.168ZM82.2911 52.882C81.7311 52.882 81.2318 53.0547 80.7931 53.4C80.3638 53.736 80.1165 54.2307 80.0511 54.884H84.4191C84.3911 54.2587 84.1765 53.7687 83.7751 53.414C83.3738 53.0593 82.8791 52.882 82.2911 52.882ZM85.6117 59L88.0197 55.528L85.6117 52.056H86.8857L88.8317 54.926L90.7917 52.056H92.0517L89.6437 55.528L92.0517 59H90.7917L88.8317 56.13L86.8857 59H85.6117ZM92.7844 62.08V52.056H93.8484L93.9604 53.204C94.1844 52.868 94.5017 52.5647 94.9124 52.294C95.3324 52.0233 95.8644 51.888 96.5084 51.888C97.199 51.888 97.801 52.0467 98.3144 52.364C98.8277 52.6813 99.2244 53.1153 99.5044 53.666C99.7937 54.2167 99.9384 54.842 99.9384 55.542C99.9384 56.242 99.7937 56.8673 99.5044 57.418C99.2244 57.9593 98.823 58.3887 98.3004 58.706C97.787 59.014 97.185 59.168 96.4944 59.168C95.925 59.168 95.4164 59.0513 94.9684 58.818C94.5297 58.5847 94.1937 58.258 93.9604 57.838V62.08H92.7844ZM96.3684 58.146C96.835 58.146 97.2457 58.0387 97.6004 57.824C97.955 57.6 98.235 57.292 98.4404 56.9C98.6457 56.508 98.7484 56.0507 98.7484 55.528C98.7484 55.0053 98.6457 54.548 98.4404 54.156C98.235 53.764 97.955 53.4607 97.6004 53.246C97.2457 53.022 96.835 52.91 96.3684 52.91C95.9017 52.91 95.491 53.022 95.1364 53.246C94.7817 53.4607 94.5017 53.764 94.2964 54.156C94.091 54.548 93.9884 55.0053 93.9884 55.528C93.9884 56.0507 94.091 56.508 94.2964 56.9C94.5017 57.292 94.7817 57.6 95.1364 57.824C95.491 58.0387 95.9017 58.146 96.3684 58.146ZM101.075 59V48.92H102.251V59H101.075ZM106.843 59.168C106.19 59.168 105.602 59.0187 105.079 58.72C104.556 58.4213 104.141 58.0013 103.833 57.46C103.534 56.9093 103.385 56.2653 103.385 55.528C103.385 54.7907 103.539 54.1513 103.847 53.61C104.155 53.0593 104.57 52.6347 105.093 52.336C105.625 52.0373 106.218 51.888 106.871 51.888C107.524 51.888 108.112 52.0373 108.635 52.336C109.158 52.6347 109.568 53.0593 109.867 53.61C110.175 54.1513 110.329 54.7907 110.329 55.528C110.329 56.2653 110.175 56.9093 109.867 57.46C109.559 58.0013 109.139 58.4213 108.607 58.72C108.084 59.0187 107.496 59.168 106.843 59.168ZM106.843 58.16C107.244 58.16 107.618 58.062 107.963 57.866C108.308 57.67 108.588 57.376 108.803 56.984C109.018 56.592 109.125 56.1067 109.125 55.528C109.125 54.9493 109.018 54.464 108.803 54.072C108.598 53.68 108.322 53.386 107.977 53.19C107.632 52.994 107.263 52.896 106.871 52.896C106.47 52.896 106.096 52.994 105.751 53.19C105.406 53.386 105.126 53.68 104.911 54.072C104.696 54.464 104.589 54.9493 104.589 55.528C104.589 56.1067 104.696 56.592 104.911 56.984C105.126 57.376 105.401 57.67 105.737 57.866C106.082 58.062 106.451 58.16 106.843 58.16ZM111.464 59V52.056H112.528L112.626 53.386C112.841 52.9287 113.167 52.5647 113.606 52.294C114.045 52.0233 114.586 51.888 115.23 51.888V53.12H114.908C114.497 53.12 114.119 53.1947 113.774 53.344C113.429 53.484 113.153 53.7267 112.948 54.072C112.743 54.4173 112.64 54.8933 112.64 55.5V59H111.464ZM118.912 59.168C118.25 59.168 117.662 59.0187 117.148 58.72C116.635 58.412 116.229 57.9873 115.93 57.446C115.641 56.9047 115.496 56.2653 115.496 55.528C115.496 54.8 115.641 54.1653 115.93 53.624C116.22 53.0733 116.621 52.6487 117.134 52.35C117.657 52.042 118.259 51.888 118.94 51.888C119.612 51.888 120.191 52.042 120.676 52.35C121.171 52.6487 121.549 53.0453 121.81 53.54C122.072 54.0347 122.202 54.5667 122.202 55.136C122.202 55.2387 122.198 55.3413 122.188 55.444C122.188 55.5467 122.188 55.6633 122.188 55.794H116.658C116.686 56.326 116.808 56.7693 117.022 57.124C117.246 57.4693 117.522 57.7307 117.848 57.908C118.184 58.0853 118.539 58.174 118.912 58.174C119.398 58.174 119.804 58.062 120.13 57.838C120.457 57.614 120.695 57.3107 120.844 56.928H122.006C121.82 57.572 121.46 58.1087 120.928 58.538C120.406 58.958 119.734 59.168 118.912 59.168ZM118.912 52.882C118.352 52.882 117.853 53.0547 117.414 53.4C116.985 53.736 116.738 54.2307 116.672 54.884H121.04C121.012 54.2587 120.798 53.7687 120.396 53.414C119.995 53.0593 119.5 52.882 118.912 52.882ZM123.513 56.284L123.373 49.2H124.647L124.507 56.284H123.513ZM124.045 59.07C123.812 59.07 123.616 58.9953 123.457 58.846C123.308 58.6873 123.233 58.496 123.233 58.272C123.233 58.048 123.308 57.8613 123.457 57.712C123.616 57.5533 123.812 57.474 124.045 57.474C124.269 57.474 124.456 57.5533 124.605 57.712C124.764 57.8613 124.843 58.048 124.843 58.272C124.843 58.496 124.764 58.6873 124.605 58.846C124.456 58.9953 124.269 59.07 124.045 59.07Z"
                fill="black"/>
            <g opacity="0.9">
                <g clipPath="url(#clip0_4786_18661)">
                    <path fillRule="evenodd" clipRule="evenodd"
                          d="M55.5953 10.3542C55.0497 10.5244 54.7454 11.1047 54.9157 11.6503L59.8479 27.4563C60.0181 28.0019 60.5984 28.3061 61.144 28.1359L71.0228 25.0532C71.5683 24.883 71.8726 24.3027 71.7024 23.7571L66.7701 7.95115C66.5999 7.40556 66.0196 7.10129 65.474 7.27154L55.5953 10.3542ZM52.9399 12.2668C52.4292 10.6301 53.342 8.88918 54.9788 8.37843L64.8575 5.29579C66.4942 4.78505 68.2351 5.69786 68.7459 7.33462L73.6781 23.1406C74.1889 24.7773 73.276 26.5182 71.6393 27.029L61.7606 30.1116C60.1238 30.6224 58.3829 29.7096 57.8721 28.0728L52.9399 12.2668Z"
                          fill="#344569"/>
                    <path fillRule="evenodd" clipRule="evenodd"
                          d="M64.1711 23.9395C64.0008 23.3939 64.3051 22.8136 64.8507 22.6434L64.8605 22.6403C65.4061 22.4701 65.9864 22.7743 66.1567 23.3199C66.3269 23.8655 66.0227 24.4458 65.4771 24.6161L65.4672 24.6191C64.9216 24.7894 64.3413 24.4851 64.1711 23.9395Z"
                          fill="#344569"/>
                </g>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M75.2919 5.80045C75.8375 5.6302 76.4178 5.93447 76.588 6.48006L80.9037 20.3103C81.074 20.8559 80.7697 21.4362 80.2241 21.6064C79.6785 21.7767 79.0982 21.4724 78.928 20.9268L74.6123 7.09659C74.4421 6.551 74.7463 5.9707 75.2919 5.80045Z"
                      fill="#344569"/>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M51.2672 29.5579C50.7216 29.7282 50.1413 29.4239 49.971 28.8783L45.6553 15.0481C45.4851 14.5025 45.7894 13.9222 46.3349 13.752C46.8805 13.5817 47.4608 13.886 47.6311 14.4316L51.9468 28.2618C52.117 28.8074 51.8128 29.3877 51.2672 29.5579Z"
                      fill="#344569"/>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M79.8598 6.54362C80.4054 6.37337 80.9857 6.67764 81.1559 7.22322L84.2386 17.1019C84.4088 17.6475 84.1045 18.2278 83.5589 18.3981C83.0134 18.5683 82.4331 18.2641 82.2628 17.7185L79.1802 7.83975C79.0099 7.29416 79.3142 6.71386 79.8598 6.54362Z"
                      fill="#344569"/>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M46.6993 28.8158C46.1537 28.986 45.5734 28.6817 45.4032 28.1362L42.3205 18.2574C42.1503 17.7118 42.4545 17.1315 43.0001 16.9613C43.5457 16.791 44.126 17.0953 44.2963 17.6409L47.3789 27.5196C47.5492 28.0652 47.2449 28.6455 46.6993 28.8158Z"
                      fill="#344569"/>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M70.4154 4.07047C70.961 3.90022 71.5413 4.20449 71.7116 4.75008L77.5686 23.5197C77.7388 24.0652 77.4346 24.6455 76.889 24.8158C76.3434 24.986 75.7631 24.6818 75.5928 24.1362L69.7358 5.36661C69.5656 4.82102 69.8699 4.24072 70.4154 4.07047Z"
                      fill="#344569"/>
                <path fillRule="evenodd" clipRule="evenodd"
                      d="M56.1436 31.2889C55.598 31.4592 55.0177 31.1549 54.8475 30.6093L48.9905 11.8397C48.8202 11.2941 49.1245 10.7138 49.6701 10.5436C50.2157 10.3733 50.796 10.6776 50.9662 11.2232L56.8232 29.9928C56.9935 30.5384 56.6892 31.1187 56.1436 31.2889Z"
                      fill="#344569"/>
            </g>
            <defs>
                <clipPath id="clip0_4786_18661">
                    <rect width="42.4289" height="24.8364" fill="white"
                          transform="translate(39.4829 12.6387) rotate(-17.3304)"/>
                </clipPath>
            </defs>
        </svg>
    )
}